{{template "base" .}}

{{define "title"}}
    Virtual Terminal
{{end}}

{{define "content"}}
    <div class="row">
        <div class="col">
            <h2 class="text-center mt-3">Virtual Terminal</h2>

            <hr>

            <form
                    action="/payment-succeed"
                    method="post"
                    name="charge-form"
                    id="charge_form"
                    class="d-block needs-validation charge-form"
                    autocomplete="off"
                    novalidate="novalidate"
            >
                <div class="mb-3">
                    <label
                            for="amount"
                            class="form-label"
                    >
                        Amount
                    </label>

                    <input
                            name="amount"
                            id="amount"
                            type="text"
                            required
                            autocomplete="amount-new"
                            class="form-control"
                    >
                </div>

                <div class="mb-3">
                    <label
                            for="cardholder_name"
                            class="form-label"
                    >
                        Cardholder Name
                    </label>

                    <input
                            name="cardholder-name"
                            id="cardholder_name"
                            type="text"
                            required
                            autocomplete="cardholder-name-new"
                            class="form-control"
                    >
                </div>

                <div class="mb-3">
                    <label
                            for="email"
                            class="form-label"
                    >
                        Email
                    </label>

                    <input
                            name="email"
                            id="email"
                            type="text"
                            required
                            autocomplete="email-new"
                            class="form-control"
                    >
                </div>

                <!-- stripe -->
                <div class="mb-3">
                    <label
                            for="card_element"
                            class="form-label"
                    >
                        Credit Card
                    </label>

                    <div id="card_element" class="form-control"></div>

                    <div class="alert-danger text-center" id="card_errors" role="alert"></div>

                    <div class="alert-success text-center" id="card_success" role="alert"></div>
                </div>

                <hr>

                <a href="javascript:void(0)" id="pay_button" class="btn btn-primary" onclick="onChargeCard()">Charge Card</a>

                <div
                    id="processing_payment"
                    class="text-center d-none"
                >
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>

                <input type="hidden" name="payment-intent" id="payment_intent">
                <input type="hidden" name="payment-method" id="payment_method">
                <input type="hidden" name="payment-amount" id="payment_amount">
                <input type="hidden" name="payment-currency" id="payment_currency">
            </form>
        </div>
    </div>
{{end}}

{{define "js"}}
    <script src="https://js.stripe.com/v3"></script>

    <script>
        let card
        let stripe = Stripe('pk_test_51NAAa2H05TTfxLt3LbCIUakd1KxUirl71AdAJ7yg0xXuoxYVzwIZYeaiLiNgubGu4EBEElyAaemJdCY5S24TJ3C700jIf4fsfg')

        const cardMessages = document.getElementById('card_messages')
        const payButton = document.getElementById('pay_button')
        const processing = document.getElementById('processing_payment')

        function hidePayButton() {
            payButton.classList.add('d-none')
            processing.classList.remove('d-none')
        }

        function onChargeCard() {
            let form = document.getElementById('charge_form')

            if (!form.checkValidity()) {
                this.event.preventDefault()
                this.event.stopPropagation()
                form.classList.add('was-validated')
            } else {
                form.classList.add('was-validated')
                hidePayButton()
                postPaymentIndent()
            }
        }

        function postPaymentIndent(data) {
            let amountToCharge = String(parseFloat(document.getElementById('amount').value) * 100)
            let payload = {
                amount: amountToCharge,
                currency: 'USD',
            }

            fetch("http://localhost:4001/api/payment-intent", {
                method: 'post',
                mode: 'cors',
                headers:{
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload),
            })
                .then(response => response.text())
                .then(data => {
                    let parsedText
                    
                    try {
                        parsedText = JSON.parse(data)
                        console.log(parsedText)
                    } catch (e) {
                        console.log(e)
                    }
                })
        }

        // stripe connection to get settings for html element
        (() => {
            // creating stripe and elements
            const elements = stripe.elements()
            const style = {
                base: {
                    fontSize: '16px',
                    lineHeight: '24px',
                }
            }

            card = elements.create('card', {
                style,
                hidePostalCode: true,
            })

            card.mount('#card_element')

            card.addEventListener('change', (event) => {
                let cardErrors = document.getElementById('card_errors')

                if (event.error) {
                    cardErrors.classList.remove('d-none')
                    cardErrors.textContent = event.error.message
                } else {
                    cardErrors.classList.add('d-none')
                    cardErrors.textContent = ''
                }
            })

        })()
    </script>
{{end}}